package com.manuelpedreira.shorturl.services;

import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.manuelpedreira.shorturl.controllers.UrlGetController;
import com.manuelpedreira.shorturl.entities.Url;
import com.manuelpedreira.shorturl.repositories.UrlRepository;

@Service
public class UrlServiceImp implements UrlService {

  @Autowired
  private UrlRepository urlRepository;

  private static final Logger logger = LoggerFactory.getLogger(UrlGetController.class);

  @Override
  public Optional<Url> findByShortCode(String shortCode) {
    return urlRepository.findByShortCode(shortCode);
  }

  @Override
  public Url save(Url url) {
    if (url.getShortCode() == null || url.getShortCode().isEmpty()) {
      url.setShortCode(generarShortCode());
    }

    if (url.getCreatedAt() == null) {
      url.setCreatedAt(java.time.LocalDateTime.now());
    }

    if (url.getExpirationDate() == null) {
      url.setExpirationDate(java.time.LocalDateTime.now().plus(2, java.time.temporal.ChronoUnit.MONTHS));
    }

    return urlRepository.save(url);
  }

 @Override
  public Boolean existsByShortCode(String shortCode) {
    return urlRepository.existsByShortCode(shortCode);
  }

  private String generarShortCode() {
    String newShortCode = java.util.UUID.randomUUID().toString().replaceAll("[^a-zA-Z0-9]", "").substring(0, 7);

    if (urlRepository.existsByShortCode(newShortCode)) {
      logger.warn("Collision generated by ShortUrl: " + newShortCode);
      newShortCode = generarShortCode();
    }
    return newShortCode;
  }

}
